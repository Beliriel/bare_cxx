// -*-coding: mule-utf-8-unix; fill-column: 59; mode:c++ -*-
/** 
 * @file
 *
 * This file is a part of Bare C++ library. Bare C++
 * library is a standard library specially designed for
 * systems without memory protection like exokernel
 * operating systems.
 *
 * @author Sergei Lodyagin <serg@kogorta.dp.ua>
 * @copyright (C) 2013 Cohors LLC
 *
 */

#ifndef _OSTREAM_HEADER
#define _OSTREAM_HEADER

#include <ios>
#include <bits/locale.h>
#include <bits/stream_iterator.h>

namespace std 
{

template <
  class CharT,
  class Traits = char_traits<CharT>
> 
class basic_ostream 
  : virtual public basic_ios<CharT, Traits>
{		
public:
  typedef CharT char_type;
  typedef Traits traits_type;
  typedef typename Traits::int_type int_type;
  typedef typename Traits::pos_type post_type;
  typedef typename Traits::off_type off_type;

  explicit basic_ostream
    (std::basic_streambuf<CharT, Traits>* sb)
  {
    basic_ios<CharT, Traits>::init(sb);
  }

  // FIXME virtual
  ~basic_ostream() {}

  // TODO
  // operator=
		
  // TODO
  basic_ostream& flush() { return *this; }

  class sentry
  {
  public:
    explicit sentry(std::basic_ostream<CharT,Traits>& os)
      : ok(false)
    {
      if (!os.good()) {
        return;
      }

      /* TODO if eofbit or badbit are set on the output
      stream, sets the failbit as well, and if exceptions
      on failbit are enabled in this output stream's
      exception mask, throws ios_base::failure.  */

      auto tied = os.tie();
      if (tied) 
        tied->flush();
      ok = true;
    }

    ~sentry() {}

    explicit operator bool() const
    {
      return ok;
    }

  protected:
    bool ok;
  };

  // TODO other types

  basic_ostream<CharT, Traits>& operator<<(short v);
  basic_ostream<CharT, Traits>& operator<<(unsigned short v);

  basic_ostream<CharT, Traits>& operator<<(int v);
  basic_ostream<CharT, Traits>& operator<<(unsigned int v);

  basic_ostream<CharT, Traits>& operator<<(long v);
  basic_ostream<CharT, Traits>& operator<<(unsigned long v);

  basic_ostream<CharT, Traits>& operator<<(long long v);
  basic_ostream<CharT, Traits>& operator<<(unsigned long long v);

  basic_ostream& operator<<(ios_base& (*func)(ios_base&) )
    {
      (*func)(*this);
      return *this;
    }

  basic_ostream& operator<<(
    basic_ios<CharT,Traits>& (*func)(basic_ios<CharT,Traits>&) 
    )
    {
      (*func)(*this);
      return *this;
    }

  basic_ostream& operator<<(
    basic_ostream<CharT,Traits>& (*func)(basic_ostream<CharT,Traits>&)   
    )
    {
      return (*func)(*this);
    }

  basic_ostream& put(char_type ch);

protected:
  basic_ostream(const basic_ostream& rhs) = delete;

  // TODO
  // basic_ostream( basic_ostream&& rhs );
};

template< class CharT, class Traits>
basic_ostream<CharT,Traits>& 
operator << (basic_ostream<CharT,Traits>& os, CharT ch)
{
//  try
//  {
    // TODO padding
    typename basic_ostream<CharT,Traits>::sentry sentry(os);
    if (sentry) {
      os.rdbuf() -> sputc(ch);
    }
//  }
//  catch(...)
//  {
//TODO    os.setstate(ios_base::badbit); // can throw the exception
//  }
  return os;
}	

template<
    class String,
    class CharT = typename ::strings::traits<String>::value_type,
    class Traits = typename ::strings::traits<String>::traits_type,
    typename enable_if<
	types::is_string<String>::value,
	bool
    >::type = false
>
basic_ostream<CharT, Traits>&
//
operator<< (
    basic_ostream<CharT,Traits>& os, 
    const String& str
)
{
//  try
//  {
    // TODO padding
    typename basic_ostream<CharT,Traits>::sentry sentry(os);
    if (sentry) {
      os.rdbuf() -> sputn(str);
    }
//  }
//  catch(...)
//  {
//TODO    os.setstate(ios_base::badbit); // can throw the exception
//  }
  return os;
}	

typedef basic_ostream<char> ostream;
typedef basic_ostream<wchar_t> wostream;

template<class CharT, class Traits>
basic_ostream<CharT, Traits>& 
//
endl(basic_ostream<CharT, Traits>& os)
{
  os.put('\n'); // TODO widen
  os.flush();
  return os;
}


} // namespace std

#endif

