// -*-coding: mule-utf-8-unix; fill-column: 59 -*-
/** 
 * @file
 *
 * This file is a part of Bare C++ library. Bare C++
 * library is a standard library specially designed for
 * systems without memory protection like exokernel
 * operating systems.
 *
 * @author Sergei Lodyagin <serg@kogorta.dp.ua>
 * @copyright (C) 2013 Cohors LLC
 *
 */

#ifndef _ITERATOR_HEADER_
#define _ITERATOR_HEADER_

#include <cstddef>

#include <bits/iterator.h>
//#include <bits/stream_iterator.h>

namespace std {

namespace bits {

template<class InputIt>
constexpr typename std::iterator_traits<InputIt>::difference_type 
distance(InputIt first, InputIt last, std::random_access_iterator_tag)
{
  return last - first;
}

template<class InputIt>
constexpr typename std::iterator_traits<InputIt>::difference_type 
distance(InputIt first, InputIt last, std::input_iterator_tag)
{
  typename std::iterator_traits<InputIt>::difference_type cnt = 0;
  while (first++ != last)
    cnt++;
  return cnt;
}

} // namespace bits

template<class InputIt>
constexpr typename std::iterator_traits<InputIt>::difference_type 
distance(InputIt first, InputIt last)
{
  static_assert(
    bits::is_compatible(first, last),
    "distance/2: the iterators are not compatible"
  );

  return bits::distance(
    first,
    last,
    std::iterator_traits<InputIt>::iterator_category()
  );
}

} // namespace std

#endif
