// -*-coding: mule-utf-8-unix; fill-column: 59; mode:c++ -*-
/** 
 * @file
 *
 * This file is a part of Bare C++ library. Bare C++
 * library is a standard library specially designed for
 * systems without memory protection like exokernel
 * operating systems.
 *
 * @author Sergei Lodyagin <serg@kogorta.dp.ua>
 * @copyright (C) 2013 Cohors LLC
 *
 */

#ifndef _TYPE_TRAITS_HEADER_
#define _TYPE_TRAITS_HEADER_

#include <cstddef> // nullptr_t

#define __has_builtin(x) 0
#define __has_feature(x) 0
#define _ALIGNAS alignas
#define _LIBCPP_BEGIN_NAMESPACE_STD namespace std {
#define _LIBCPP_CONSTEXPR constexpr
#define _LIBCPP_CONSTEXPR_AFTER_CXX11 constexpr
#define _LIBCPP_CONSTEXPR_AFTER_CXX14 constexpr
#define _LIBCPP_END_NAMESPACE_STD }
#define _LIBCPP_INLINE_VISIBILITY
#define _LIBCPP_NO_CFI
#define _LIBCPP_STD_VER 14
#define _LIBCPP_TYPE_VIS_ONLY
#define _NOEXCEPT noexcept
#define _NOEXCEPT_ noexcept
#define _VSTD std

#include <bits/libcxx/type_traits>

namespace std {
#if 0
// enable_if

template<bool B, class T = void>
struct enable_if {};
 
template<class T>
struct enable_if<true, T> { typedef T type; };

// is_const

template<class T> 
struct is_const : false_type {};

template<class T> 
struct is_const<const T> : true_type {};

template <class _Tp, class... _Args>
struct is_constructible
    : public __libcpp_is_constructible<_Tp, _Args...>::type {};


template<class T>
struct is_copy_constructible :
    std::is_constructible<T, typename std::add_lvalue_reference<
        typename std::add_const<T>::type>::type>> {};
 
template<class T>
struct is_trivially_copy_constructible :
    std::is_trivially_constructible<T, typename std::add_lvalue_reference<
        typename std::add_const<T>::type>::type>> {};
 
template<class T>
struct is_nothrow_copy_constructible :
    std::is_nothrow_constructible<T, typename std::add_lvalue_reference<
        typename std::add_const<T>::type>::type>> {};
#endif
} // namespace std

#endif

