// -*-coding: mule-utf-8-unix; fill-column: 59 -*-
/** 
 * @file
 *
 * This file is a part of Bare C++ library. Bare C++
 * library is a standard library specially designed for
 * systems without memory protection like exokernel
 * operating systems.
 *
 * @author Sergei Lodyagin <serg@kogorta.dp.ua>
 * @copyright (C) 2013 Cohors LLC
 *
 */

#ifndef _TYPE_TRAITS_HEADER_
#define _TYPE_TRAITS_HEADER_

namespace std {

template<class T> 
struct remove_reference { typedef T type; };

template<class T> 
struct remove_reference<T&> { typedef T type; };

template<class T> 
struct remove_reference<T&&> { typedef T type; };

template< class T >
using remove_reference_t = 
  typename remove_reference<T>::type;

// integral_constant<T,v>

template<class T, T v>
struct integral_constant
{
  typedef T value_type;
  typedef integral_constant type;

  static constexpr T value = v;

  constexpr operator value_type() const { return value; }
  constexpr value_type operator()() const { return value; }
};

typedef integral_constant<bool, true> true_type;
typedef integral_constant<bool, false> false_type;

// is_same<A. B>

template<class A, class B>
struct is_same : public false_type {};

template<class A>
struct is_same<A,A> : public true_type {};

}

#endif

