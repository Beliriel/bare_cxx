// -*-coding: mule-utf-8-unix; fill-column: 58 -*-
/** 
 * @file
 *
 * This file is a part of Bare C++ library. Bare C++ library is a standard
 * library specially designed for systems without memory protection like
 * exokernel operating systems.
 *
 * @author Sergei Lodyagin <serg@kogorta.dp.ua>
 * @copyright (C) 2013 Cohors LLC
 *
 */

#ifndef _CSTDLIB_HEADER
#define _CSTDLIB_HEADER

#include <cstdint>

namespace _STD {

struct div_t
{
  int quot;
  int rem;
};

struct ldiv_t
{
  long quot;
  long rem;
};

struct lldiv_t
{
  long long quot;
  long long rem;
};

struct imaxdiv_t
{
  intmax_t quot;
  intmax_t rem;
};

inline div_t div(int x, int y)
{
  static_assert(sizeof(int) == 4, 
                "div: sizeof(int) != 4");
  register int x_ asm ("eax") = x;
  register int quot asm ("eax");
  register int rem asm ("edx");
  asm ("cdq \n\t"
       "idivl %2" 
       : "=r" (quot), "=r" (rem)
       : "rm" (y), "0" (x_));
  return { quot, rem };
}

inline ldiv_t ldiv(long x, long y)
{
  static_assert(sizeof(long) == 8, 
              "ldiv: sizeof(long) != 8");
  register long x_ asm ("rax") = x;
  register long quot asm ("rax");
  register long rem asm ("rdx");
  asm ("cd?\n\tidivq %2" 
       : "=r" (quot), "=r" (rem)
       : "rm" (y), "0" (x_));
  return { quot, rem };
}

inline lldiv_t lldiv(long long x, long long y)
{
  static_assert(sizeof(long long) == 8, 
              "lldiv: sizeof(long long) != 8");
  register long x_ asm ("rax") = x;
  register long quot asm ("rax");
  register long rem asm ("rdx");
  asm ("cd?\n\tidivq %2" 
       : "=r" (quot), "=r" (rem)
       : "rm" (y), "0" (x_));
  return { quot, rem };
}

inline imaxdiv_t imaxdiv(intmax_t x, intmax_t y)
{
  static_assert(sizeof(intmax_t) == 8, 
              "lldiv: sizeof(long long) != 8");
  register long x_ asm ("rax") = x;
  register long quot asm ("rax");
  register long rem asm ("rdx");
  asm ("cd?\n\tidivq %2" 
       : "=r" (quot), "=r" (rem)
       : "rm" (y), "0" (x_));
  return { quot, rem };
}

}

#endif
