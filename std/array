// -*-coding: mule-utf-8-unix; fill-column: 58 -*-
/** 
 * @file
 *
 * This file is a part of Bare C++ library. Bare C++ library is a standard
 * library specially designed for systems without memory protection like
 * exokernel operating systems.
 *
 * @author Sergei Lodyagin <serg@kogorta.dp.ua>
 * @copyright (C) 2013 Cohors LLC
 *
 */

#ifndef _ARRAY_HEADER_
#define _ARRAY_HEADER_

//#include <type_traits>

namespace std {

/**
 * The std::array implementation.
 * It is "cycled", iterator++ at the last cell jumps to
 * start. As a result a difference between two iterators
 * count overlaps.
 *
 * @author Sergei Lodyagin
 */
template<class T, std::size_t N>
class array
{
  T arr[N];
  typedef size_t index_type;
  typedef int8_t carry_type;

  static_assert(N >= 0, "array: N is negative");
public:
  typedef T value_type;
//  static_assert(is_destructible<T>, 
//               "array::value_type must be Destructible");

  typedef T& reference;
  typedef const T& const_reference;
  typedef ptrdiff_t difference_type;
  typedef size_t size_type;

  class iterator
  {
  public:
    bool operator == (const iterator& b) const noexcept
    { 
      return virtual_ptr() == b.virtual_ptr();
    }
  
    bool operator != (const iterator& b) const noexcept
    {
      return !operator==(b);
    }

    bool operator < (const iterator& b) const noexcept
    {
      return *this - b < 0;
    }

    bool operator > (const iterator& b) const noexcept
    {
      return *this - b > 0;
    }

    bool operator <= (const iterator& b) const noexcept
    {
      return *this - b <= 0;
    }

    bool operator >= (const iterator& b) const noexcept
    {
      return *this - b >= 0;
    }

    reference operator * () noexcept
    {
      return *ptr;
    }

    const_reference operator * () const noexcept
    {
      return *ptr;
    }

    //! A "cycled" implementation. carry is incremented
    //! witch each overlap.
    iterator& operator ++ () noexcept
    {
      if (__builtin_expect(ptr++ >= a_last, 0))
      {
        ptr = a_begin;
        static_assert(N < UINT64MAX/4, "array: too big");
        carry += N;
      }
      return *this;
    }

    //! A "cycled" implementation. carry is incremented
    //! witch each overlap.
    iterator operator ++ (int) noexcept
    {
      iterator copy(*this);
      ++(*this);
      return copy;
    }

    //! A "cycled" implementation. carry is incremented
    //! witch each overlap.
    iterator& operator -- () noexcept
    {
      if (__builtin_expect(ptr-- <= a_begin, 0))
      {
        ptr = a_last;
        static_assert(N < UINT64MAX/4, "array: too big");
        carry -= N;
      }
      return *this;
    }

    //! A "cycled" implementation. carry is incremented
    //! witch each overlap.
    iterator operator -- (int) noexcept
    {
      iterator copy(*this);
      --(*this);
      return copy;
    }

    difference_type operator - (const iterator& b) const 
      noexcept
    {
      return virtual_ptr() - b.virtual_ptr();
    }

  private:
    iterator(T a_ptr[]) noexcept 
      : a_begin(a_ptr),
        a_last(a_ptr + N - 1)
    {
      static_assert(N > 0, "array: wrong specialization");
    }

    const T* virtual_ptr() const noexcept
    {
      return ptr + carry;
    }

    T* const a_begin;
    T* const a_last;
    T* ptr;
    int64_t carry;
  };

  typedef const iterator const_iterator;
};

}

#endif
