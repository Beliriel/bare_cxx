// -*-coding: mule-utf-8-unix; fill-column: 59; mode:c++ -*-
/** 
 * @file
 *
 * This file is a part of Bare C++ library. Bare C++
 * library is a standard library specially designed for
 * systems without memory protection like exokernel
 * operating systems.
 *
 * @author Sergei Lodyagin <serg@kogorta.dp.ua>
 * @copyright (C) 2013 Cohors LLC
 *
 */

#ifndef _STREAMBUF_HEADER_
#define _STREAMBUF_HEADER_

#include <string>
#include <types/string.h>

namespace std {

/**
  * It is not close to the standard yet.
  * noexcept in some methods is a bare c++ extension
  * @author Sergei Lodyagin
  */
template <
  class CharT,
  class Traits = std::char_traits<CharT>
>
class basic_streambuf
{
public:
  typedef CharT char_type;
  typedef Traits traits_type;
  typedef typename Traits::int_type int_type;
  typedef typename Traits::off_type off_type;

  virtual ~basic_streambuf() {}

  int pubsync() { return sync(); }

  int_type sputc(char_type ch) noexcept
  {
    xsputn(&ch, 1);
    return Traits::to_int_type(ch);
  }

  //! A version with a non-standard argument, we use a safe
  //! size-limted string instead of const char* + count.
  streamsize sputn(
	 ::types::basic_constexpr_string<CharT, Traits> s
  ) noexcept
  {
    xsputn(s.data(), s.size());
    return s.size();
  }

protected:
//  virtual locale imbue(const locale& loc) {}

  virtual int sync() { return 0; }

  virtual streamsize xsputn(
	 const char_type* s, 
	 std::streamsize count
  ) noexcept = 0; 
};

typedef basic_streambuf<char> streambuf;
typedef basic_streambuf<wchar_t> wstreambuf;

}

#endif
