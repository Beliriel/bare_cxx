// -*-coding: mule-utf-8-unix; fill-column: 59 -*-
/** 
 * @file
 *
 * This file is a part of Bare C++ library. Bare C++
 * library is a standard library specially designed for
 * systems without memory protection like exokernel
 * operating systems.
 *
 * @author Sergei Lodyagin <serg@kogorta.dp.ua>
 * @copyright (C) 2013 Cohors LLC
 *
 */

#ifndef _ALGORITHM_HEADER_
#define _ALGORITHM_HEADER_

#include <utility>
#include <type_traits>
#include <cstdlib>
#include <bits/meta.h>
#include <bits/iterator.h>
#include <bits/silent_assert.h>

namespace std {

template< class InputIt, class OutputIt >
OutputIt copy( InputIt first, InputIt last, OutputIt d_first )
{
  if (__builtin_expect(bits::is_compatible(first, last), 1)) {
    // TODO cache optimization
    while (first != last)
      *d_first++ = *first++;
  }
  else
    _silent_assert(false);

  return d_first;
}

template<class ForwardIt, class T>
void fill(ForwardIt first, ForwardIt last, const T& value)
{
  // TODO cache optimization
  // TODO the case of a zero-fill of a continuous storage
  if (__builtin_expect(bits::is_compatible(first, last), 1)) {
    for (; first != last; ++first)
      *first = value;
  }
  else 
    _silent_assert(false);
}

template< class InputIt, class UnaryFunction >
UnaryFunction for_each
  ( InputIt first, InputIt last, UnaryFunction f )
{
  if (__builtin_expect(bits::is_compatible(first, last), 1)) {
    for (; first != last; ++first)
      f(*first);
  }
  else 
    _silent_assert(false);

  return std::move(f);
}

// Swap version for scalars
// FIXME move semantic, noexcept specification
template<class T>
auto swap(T& a, T& b) noexcept
  -> bits::EnableFunIf<std::is_scalar<T>::value, void>
{
  //TODO check the compilation result (assembler)
  T temp = a;
  a = b;
  b = temp;
}

template<class T>
auto swap(T& a, T& b) noexcept
  -> decltype(a.swap(b), void())
{
  a.swap(b);
}

/* Disabled for safety. Use std::array::swap. 
template< class T2, size_t N >
void swap( T2 (&a)[N], T2 (&b)[N])
{
}
*/

}

#endif
