// -*-coding: mule-utf-8-unix; fill-column: 58 -*-
/** 
 * @file
 *
 * This file is a part of Bare C++ library. Bare C++
 * library is a standard library specially designed for
 * systems without memory protection like exokernel
 * operating systems.
 *
 * @author Sergei Lodyagin <serg@kogorta.dp.ua>
 * @copyright (C) 2013 Cohors LLC
 *
 */

#ifndef _BITSET_HEADER_
#define _BITSET_HEADER_

#include <cstdexcept>
#include <cstddef>
#include <array>
#include <limits>
#include <algorithm>
#include <bits/constexpr_math.h>
#include <bits/bits.h>

namespace std {

using namespace bits;

//TODO check errors (with -fstrict-overflow ?)
template<size_t N>
class bitset
{
  // to allow use N+1 in the end() expression
  static_assert(N < numeric_limits<size_t>::max() - 1,
	 "bitset is too big");

  typedef unsigned long long word_t;

  constexpr static size_t size_in_words = 
    N > 0 ? (N - 1) / sizeof(word_t) + 1 : 0;

  constexpr static uint8_t bits_in_word = 
    sizeof(word_t) * 8;

  constexpr static size_t reserved_in_bits = 
    size_in_words * bits_in_word;

  constexpr static uint8_t used_bits_in_last_word =
    N % bits_in_word;

  constexpr static word_t last_word_mask = 
    n_bits_mask<used_bits_in_last_word, word_t>;

  //! A size in bits of a cell to store an index of bit
  //! inside word_t
  constexpr static uint8_t bit_idx_size = 
    log2x<bits_in_word>::value;

  //! log2(N)
  constexpr static uint8_t log2_n_bits = log2x<N>::value;

  typedef array<word_t, size_in_words> A;

public:
  template<class TR>
  class _iterator;

  class _reference
  {
    template<class TR>
    friend class _iterator;
  public:
    //! Assigns a value to the referenced bit.
    _reference& operator=(bool b) noexcept
    {
      (*bit_addr.it &= ~bit_addr.mask)
        |= (word_t) b << bit_addr.shift;
      return *this;
    }

    //! Assigns a value to the referenced bit.
    _reference& operator=(const _reference& r) noexcept
    {
      bit_addr = r.bit_addr;
      return *this;
    }

    bool operator == (const _reference& b) const noexcept
    {
      return (bool)*this == (bool) b;
    }
  
    bool operator != (const _reference& b) const noexcept
    {
      return !operator==(b);
    }

    //! Returns the value of the referenced bit. 
    operator bool() const noexcept
    {
      return *bit_addr.in & bit_addr.mask;
    }

    //! Returns the inverse of the referenced bit. 
    bool operator ~ () const noexcept
    {
      return ! operator bool();
    }

    //! Inverts the referenced bit. 
    _reference& flip() noexcept
    {
      *bit_addr.it ^= bit_addr.mask;
      return *this;
    }
  
  protected:
    _reference(A& bm, size_t bit_idx) noexcept
      : bit_addr(bm, bit_idx) {};

    // TODO test with overlapping bitsets
    bool is_same (const _reference& b) const noexcept
    {
      if (bit_addr.shift != b.bit_addr.shift)
        return false;
      else
        return bit_addr - b.bit_addr == 0;
    }

    bool is_less (const _reference& b) const noexcept
    {
      return *this - b < 0;
    }

    bool is_greater (const _reference& b) const noexcept
    {
      return *this - b > 0;
    }

    bool is_less_equal (const _reference& b) const noexcept
    {
      return *this - b <= 0;
    }

    bool is_greater_equal (const _reference& b) const 
      noexcept
    {
      return *this - b >= 0;
    }

    void forward(ptrdiff_t n) noexcept
    {
      bit_addr += n;
    }

    _reference& operator++ () noexcept
    {
      ++bit_addr;
      return *this;
    }

    // TODO test with overlapping bitsets
    ptrdiff_t operator - (const _reference& b) const
      noexcept
    {
      return bit_addr - b.bit_addr;
    }

    struct bit_addr_t 
    {
      bit_addr_t(A& a, size_t idx) noexcept
        : it(a.begin() + idx / bits_in_word),
          shift(idx % bits_in_word),
          mask((word_t)1 << shift)
      {}

      //! It cycles around the area. I think it is more
      //! safe has an infinite loop than has a data
      //! corruption. <NB> it covers also unused bits (in
      //! a case N % sizeof(word_t) % 8 != 0
      bit_addr_t& operator ++ () noexcept
      {
        if (__builtin_expect(mask <<= 1, 1) == 0) {
          shift = 0; mask = 1;
          ++it;
        }
        else {
          ++shift;
        }
        return *this;
      }

      //! See the notes for operator++()
      bit_addr_t& operator -- () noexcept
      {
        if (__builtin_expect(mask >>= 1, 1) == 0) {
          shift = 0; 
          mask = n_bits_mask<bit_idx_size, word_t>();
          --it;
        }
        else {
          --shift;
        }
        return *this;
      }

      // TODO test with negative values
      bit_addr_t& operator += (ptrdiff_t n) noexcept
      {
        const int8_t shift_add = n % bits_in_word;
        (shift += shift_add) %= bits_in_word;

        if (n >= 0)
          rol(mask, shift_add);
        else
          ror(mask, -shift_add);

        it += n / bits_in_word;
        return *this;
      }

      // TODO test for negative values
      ptrdiff_t operator - (const bit_addr_t& b) const
        noexcept
      {
        return (it - b.it) * sizeof(word_t) * 8
          + shift - b.shift;
      }

      typename A::iterator it;
      uint8_t shift;
      word_t mask;
    } bit_addr;
  };

  typedef bool value_type;
  // typedef const _reference const_reference;
  typedef ptrdiff_t difference_type;
  typedef size_t size_type;
  
  template<class TR>
  class _iterator
  {
    friend bitset;

  public:
    typedef TR reference;
    typedef const _reference const_reference;

    bool operator == (const _iterator& b) const noexcept
    { 
      return ref.is_same(b.ref);
    }
  
    bool operator != (const _iterator& b) const noexcept
    {
      return !operator==(b);
    }

    bool operator < (const _iterator& b) const noexcept
    {
      return ref.is_less(b.ref);
    }

    bool operator > (const _iterator& b) const noexcept
    {
      return ref.is_greater(b.ref);
    }

    bool operator <= (const _iterator& b) const noexcept
    {
      return ref.is_less_equal(b.ref);
    }

    bool operator >= (const _iterator& b) const noexcept
    {
      return ref.is_greater_equal(b.ref);
    }

    reference operator * () noexcept { return ref; }

    const_reference operator * () const noexcept 
    { 
      return ref; 
    }

    _iterator& operator ++ () noexcept 
    { 
      ++ref; 
      return *this; 
    }

    _iterator operator ++ (int) noexcept 
    { 
      _iterator res(*this);
      ++(*this);
      return res; 
    }

    _iterator& operator -- () noexcept 
    { 
      --ref; 
      return *this; 
    }

    _iterator operator -- (int) noexcept 
    { 
      _iterator res(*this);
      --(*this);
      return res; 
    }

    _iterator& operator += (ptrdiff_t n) noexcept
    {
      ref.forward(n);
      return *this;
    }

    _iterator& operator -= (ptrdiff_t n) noexcept
    {
      ref.forward(-n);
      return *this;
    }

    _iterator operator + (ptrdiff_t n) const noexcept
    {
      _iterator copy(*this);
      return copy += n;
    }

    _iterator operator - (ptrdiff_t n) const noexcept
    {
      _iterator copy(*this);
      return copy -= n;
    }

    ptrdiff_t operator - (const _iterator& b) const
      noexcept
    {
      return distance(b);
    }

    reference operator [] (ptrdiff_t n) noexcept
    {
      return *(*this + n);
    }

    const_reference operator [] (ptrdiff_t n) const
      noexcept 
    {
      return *(*this + n);
    }

  private:
    _iterator(A& bm, size_t bit_idx) noexcept
      : ref(bm, bit_idx) {}
    reference ref;
  };

  typedef _iterator<_reference> iterator;
  typedef _iterator<const _reference> const_iterator;

  constexpr bitset() noexcept : bm{0} {}

  constexpr bitset(unsigned long long val) noexcept
    : bm {val}
  {
  }

  template<class CharT, size_t M>
  explicit bitset(
	 const CharT (&str)[M],
    const size_t n = -1,
    const CharT zero = CharT('0'), 
    const CharT one = CharT('1')
  ) 
	 : bitset() // init with zero
  {
	 if (n != M-1) // no part of string when lexem is used
		throw invalid_argument();

	 size_t i = 0;
	 for (auto r : *this)
	 {
		const CharT ch = str[i++];
		if (ch == one)
		  r = 1;
		else if (ch != zero)
		  throw invalid_argument();
	 }
  }

  bitset(const bitset& b) noexcept = default;

  bitset& operator=(const bitset& b) noexcept = default;

  //! Skips not used bits in the last cell
  bool operator == (const bitset& b) noexcept
  {
    if (last_word_mask == 0) {
      return equal(bm.begin(), b.bm.begin(), bm.end());
    }
    else {
      const word_t last_w_a = bm[N-1] & last_word_mask;
      const word_t last_w_b = b.bm[N-1] & last_word_mask;

      return last_w_a == last_w_b
        && equal(bm.begin(), b.bm.begin(), bm.end() - 1);
    }
  }

  //! Skips not used bits in the last cell
  bool operator != (const bitset& b) noexcept
  {
    return ! operator == (b);
  }

  // disabled for safety
  // void swap(bitset& b) ?noexcept
  
  constexpr size_type size() const
  {
    return N;
  }

  iterator begin() noexcept
  {
    return iterator(bm, 0);
  }

  const_iterator begin() const noexcept
  {
    return iterator(bm, 0);
  }

  const_iterator cbegin() noexcept
  {
   return const_cast<const bitset*>(this)->begin();
  }

  iterator end() noexcept
  {
    return iterator(bm, N + 1);
  }

  const_iterator end() const noexcept
  {
    return iterator(bm, N + 1);
  }

  const_iterator cend() noexcept
  {
     return const_cast<const bitset*>(this)->end();
  }

private:
  A bm;
};

template<size_t N>
typename bitset<N>::iterator 
operator + 
  (ptrdiff_t n, 
   const typename bitset<N>::iterator& it
   )  noexcept
{
  return it.operator+(n);
}

#if 0
template<>
class bitset<0> {};

#endif
}

#endif
