// -*-coding: mule-utf-8-unix; fill-column: 59 -*-
/** 
 * @file
 *
 * This file is a part of Bare C++ library. Bare C++
 * library is a standard library specially designed for
 * systems without memory protection like exokernel
 * operating systems.
 *
 * @author Sergei Lodyagin <serg@kogorta.dp.ua>
 * @copyright (C) 2013 Cohors LLC
 *
 */

#ifndef _IOS_HEADER_
#define _IOS_HEADER_

#include <cwchar>
#include <cstdint>
#include <streambuf>
#include <string>
#include <algorithm>
#ifndef _STD_LOCALES
#  include <bits/locale.h>
#else
#  include <bits/libcxx/__locale>
#endif
#include <bits/streamtypes.h>

namespace std {

template <class CharT, class Traits> 
class basic_ostream;

class ios_base
{
public:
  typedef uint8_t iostate;
  typedef uint16_t fmtflags;

  static constexpr iostate goodbit = 0x00;
  static constexpr iostate eofbit  = 0x01;
  static constexpr iostate failbit = 0x02;
  static constexpr iostate badbit  = 0x04;
  
  // 2 bits
  static constexpr fmtflags dec = 0x00;
  static constexpr fmtflags oct = 0x01;
  static constexpr fmtflags hex = 0x02;
  static constexpr fmtflags basefield = 0x03;
		
  // 2 bits
  static constexpr fmtflags left = 0;
  static constexpr fmtflags right = 1 << 2;
  static constexpr fmtflags internal = 2 << 2;
  static constexpr fmtflags adjustfield = 3 << 2;
		
  // 1 bit
  static constexpr fmtflags scientific = 0;
  static constexpr fmtflags fixed = 1 << 4;
  static constexpr fmtflags floatfield = 1 << 4;
		
  static constexpr fmtflags boolalpha = 1 << 5;
  static constexpr fmtflags showbase = 1 << 6;
  static constexpr fmtflags showpoint = 1 << 7;
  static constexpr fmtflags showpos = 1 << 8;
  static constexpr fmtflags skipws = 1 << 9;
  static constexpr fmtflags unitbuf = 1 << 10;
  static constexpr fmtflags uppercase = 1 << 11;

  ios_base(const ios_base&) = delete;

  virtual ~ios_base() {}

  fmtflags flags() const
  {
    return flags_;
  }

  fmtflags flags(fmtflags f)
  {
    swap(f, flags_);
    return f;
  }

  streamsize width() const
  {
    return width_;
  }

  streamsize width(streamsize new_width)
  {
    const streamsize old_width = width_;
    width_ = new_width;
    return old_width;
  }

  locale getloc() const { return locale(); }

  class Init
  {
  public:
    Init();
    ~Init();
  };

protected:
  ios_base() {}

private:
  fmtflags flags_ = 0;
  streamsize width_ = 0;
}; 

namespace {

ios_base::Init _std_streams_initializer;

}

template <
  class CharT,
  class Traits = char_traits<CharT>
> 
class basic_ios : public ios_base
{
public:
  typedef CharT char_type;
  typedef Traits traits_type;
  typedef typename Traits::int_type int_type;
  typedef typename Traits::pos_type post_type;
  typedef typename Traits::off_type off_type;

  explicit basic_ios(basic_streambuf<CharT, Traits>* sb);
  basic_ios(const basic_ios&) = delete;
  basic_ios& operator=(const basic_ios&) = delete;

  // FIXME virtual
  virtual ~basic_ios() {}

  bool good() const
  {
    return state_ == 0;
  }

  void setstate(iostate state)
  {
    state_ |= state;
  }

  basic_streambuf<CharT,Traits>* rdbuf() const
  {
    return buf;
  }
		
  basic_streambuf<CharT,Traits>* rdbuf
    (std::basic_streambuf<CharT, Traits>* sb)
  {
    auto old_buf = buf;
    sb.clear();
    buf = sb;
    return old_buf;
  }

  basic_ostream<CharT,Traits>* tie() const
  {
    return tied;
  }
		
  basic_ostream<CharT,Traits>* tie
    (std::basic_ostream<CharT,Traits>* strm)
  {
    swap(tied, strm);
    return strm;
  }
  
		
protected:
  basic_ios() {}
  void init(std::basic_streambuf<CharT,Traits>* sb)
  {
    buf = sb;
  }

private:
  iostate state_;
  basic_streambuf<CharT, Traits>* buf = nullptr;
  basic_ostream<CharT, Traits>* tied = nullptr;
};

typedef basic_ios<char> ios;
typedef basic_ios<wchar_t> wios;		
		
}

#endif
